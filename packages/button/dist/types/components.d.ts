/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
export namespace Components {
    interface CompButton {
        /**
          * @default false
         */
        "disabled": boolean;
        /**
          * @default 'medium'
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * @default 'button'
         */
        "type": 'button' | 'submit' | 'reset';
        /**
          * @default 'primary'
         */
        "variant": 'primary' | 'secondary' | 'danger';
    }
}
export interface CompButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCompButtonElement;
}
declare global {
    interface HTMLCompButtonElementEventMap {
        "buttonClick": MouseEvent;
    }
    interface HTMLCompButtonElement extends Components.CompButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCompButtonElementEventMap>(type: K, listener: (this: HTMLCompButtonElement, ev: CompButtonCustomEvent<HTMLCompButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCompButtonElementEventMap>(type: K, listener: (this: HTMLCompButtonElement, ev: CompButtonCustomEvent<HTMLCompButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCompButtonElement: {
        prototype: HTMLCompButtonElement;
        new (): HTMLCompButtonElement;
    };
    interface HTMLElementTagNameMap {
        "comp-button": HTMLCompButtonElement;
    }
}
declare namespace LocalJSX {
    interface CompButton {
        /**
          * @default false
         */
        "disabled"?: boolean;
        "onButtonClick"?: (event: CompButtonCustomEvent<MouseEvent>) => void;
        /**
          * @default 'medium'
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * @default 'button'
         */
        "type"?: 'button' | 'submit' | 'reset';
        /**
          * @default 'primary'
         */
        "variant"?: 'primary' | 'secondary' | 'danger';
    }
    interface IntrinsicElements {
        "comp-button": CompButton;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "comp-button": LocalJSX.CompButton & JSXBase.HTMLAttributes<HTMLCompButtonElement>;
        }
    }
}
